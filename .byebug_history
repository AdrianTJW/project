c
cc
c
@hash
c
@hash
c
@hash
@jobs
c
a.search params[:company_name]
a.search params[:search]
a=Job.all
Job.all
c
Job.where(host_id: current_host.id)
Job.find_by(current_host.id)
Job.find_by(host_id: current_host.id)
Job.find_by(host_id: current_host.id
Job.all
exit
n
@jobs
exit
@jobs
c
exit
current_user
params
c
exit
resource_name
c
params
exit
params
exit
params
c
Booking.all
Booking.last
Booking.find(params[:id])
params[:id]
params
exit
params
c
current_user.bookings.all
exit
@booking.job.type
exit
@booking
exit
params[:job_id]
params[:booking]
params
c
params
c
n
params[:job_id]
params
c
params
exit
params(:booking)
params.require(:booking).permit(:user_id)
params
c
params
c
params
exit
params
exit
params[:id]
params
exit
params[:job][:id]
params[:id]
params
c
exit
params[:id]
params(:id)
params
params[:job][:job_id]
params[:job][:id]
params[:job]
params(id)
params(:id)
params(job_id)
params(:id)
params
exit
params
c
user_params
exit
user_params
exit
User.find_by(id: current_user.id)
User.find(id: current_user.id)
current_user.id
current_user
c
exit
current_host.verify_status == true
current_host.verify_status == "true"
current_host.verify_status
current_host
c
@user
c
n
object
n
object
n
yield self if block_given?
n
c
object
n
object
n
where(provider: auth.provider, uid: auth.uid).first_or_create
c
n
auth.info.image
auth.info.name
auth.info.email
where(provider: auth.provider, uid: auth.uid).first_or_create
auth.uid
auth.provider
auth
c
@user.image
@user
user.image
n
params
access_token.info
access_token
exit
@user.persisted?
@user
c
generate_client_token
marker.lat job.latitude
marker.infowindow job.company_name
marker.infowindow
c
Job.all
c
n
c
Job.new(job_params)
job_params
jb_params
@job = Job.new(job_params)
